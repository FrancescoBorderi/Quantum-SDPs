cvx_solver sedumi

%initial value for the damping probability
r = 0;
%dimension of the input/output of the amplitude damping channel
d = 2;

%the loop is required to solve the SDP for various damping probabilities
for k=1 : 51

id = eye(d);

%Phi is the maximally entangled state (density operator)
%here we want to send a qubit
Phi = zeros(2^2);

for i=1 : 2
 for j=1 : 2

  ij = zeros(2);
  ij(i,j) = 1;

  Phi = Phi + kron(ij , ij);

 end
end

Phi = 1/2 * Phi;

%E0 and E1 are the Kraus operators of the amplitude damping channel

E0 = zeros(2);
E1 = zeros(2);

E0(1,1) = 1;
E0(2,2) = sqrt(1 - r);

E1(1,2) = sqrt(r);

%Jampnorm indicates the normalized Choi state of the depolarizing channel
Jampnorm = zeros(d^2);

for i=1 : d
 for j=1 : d

  ij = zeros(d);
  ij(i,j) = 1;

  Jampnorm = Jampnorm + kron(E0 * ij * E0' + E1 * ij * E1',ij);

 end
end

%normalization
Jampnorm = 1/d *  Jampnorm;

%JPhi is the tensor product of the Choi state of the channel and the maximally entangled state
JPhi = kron(Jampnorm,Phi);

%we permute the systems to have the correct ordering of the underlying Hilbert spaces
JPhiPerm = PermuteSystems(JPhi,[3,2,1,4],[d,d,2,2]);

cvx_begin sdp

 %the variable we are optimizing over
 variable rho(2*d*d*2,2*d*d*2)

 variable objfunction
 
 maximize(objfunction)

 subject to

 %definition of the objective function
 objfunction == d*d*trace(JPhiPerm*rho);

 rho == hermitian_semidefinite(2*d*d*2);
 trace(rho) == 1;

 %the two linear constraints
 PartialTrace(rho,2,[2,d,d,2]) == kron(1/(2)* eye(2), PartialTrace(rho,1,[2*d,d,2]));
 PartialTrace(rho,4,[2,d,d,2]) == kron(PartialTrace(rho,3,[2,d,d*2]),1/(d)* eye(d));

 cvx_end

%vector collecting the optimal values
OPT(k) = objfunction;

%we update the damping probability 
r = r + 0.02;

end
