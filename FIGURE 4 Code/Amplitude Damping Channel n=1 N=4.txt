cvx_solver sedumi

%vector of the values we want to test for the damping probability
vecR = [0.05,0.1,0.15,0.25,0.3,0.8];

%the loop is required to solve the SDP for various damping probabilities
for l=1 : 6

%dimension of the input/output of the amplitude damping channel
d = 2;

%assign a value for the damping probability
r = vecR(l);

%E0 and E1 are the Kraus operators of the amplitude damping channel
E0 = zeros(2);
E1 = zeros(2);

E0(1,1) = 1;
E0(2,2) = sqrt(1 - r);

E1(1,2) = sqrt(r);

%Jampnorm indicates the normalized Choi state of the depolarizing channel
Jampnorm = zeros(d^2);

for i=1 : d
 for j=1 : d

  ij = zeros(d);
  ij(i,j) = 1;

  Jampnorm = Jampnorm + kron(E0 * ij * E0' + E1 * ij * E1',ij);

 end
end
%normalization
Jampnorm = 1/d *  Jampnorm;

%computing the tensor product (we want four repetitions)
JampnormFour = kron(kron(kron(Jampnorm,Jampnorm),Jampnorm),Jampnorm);

%we permute the systems to have the correct ordering of the underlying Hilbert spaces
JampnormFour = PermuteSystems(JampnormFour,[1,3,5,7,2,4,6,8],[d,d,d,d,d,d,d,d]);

%changing the local dimension to 2x2x2x2=16 (and related quantities)
d = 16 ;
id = eye(d);
idnorm = 1/d * id;

%we finalize the ordering of the systems
JampPerm = PermuteSystems(JampnormFour ,[2,1],[d,d]);

%here we use the symmetry reduction for the first level relaxation (equation 20, with M=2)
cvx_begin sdp
 
  %uncomment the next line if it takes "too much"
  %cvx_precision low

  variable Y(d*d,d*d)
  variable rho(d,d)

  variable objfunction
 
  maximize(objfunction)

  subject to
  %definition of the objective function
  objfunction == d*d*trace(JampPerm * Y)

  kron(rho,idnorm) - Y == hermitian_semidefinite (d*d)

  Y == hermitian_semidefinite (d*d)

  trace(rho) == 1

  2^2 * PartialTrace(Y,1,[d,d]) == idnorm

  kron(rho,idnorm) - 2 *  PartialTranspose(Y,2,[d,d]) == hermitian_semidefinite (d*d)

  2 *  PartialTranspose(Y,2,[d,d]) + kron(rho,idnorm) == hermitian_semidefinite (d*d)

cvx_end

%vector collecting the optimal values
OPT4(l) = objfunction;

end

